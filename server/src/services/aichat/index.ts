import { recommendPrompt } from "./../../configs/aichat/recommend";
import { readScore } from "./../../const/toeic";
import { explainAIModel } from "../../configs/aichat/explainQues";
import { modelAI } from "../../configs/aichat/fillField";
import { modelAIQuizz } from "../../configs/aichat/renderQuizz";
import { BadRequestError } from "../../errors/bad_request_error";
import { FlashcardAttr } from "../../models/flashcard.model";
import ProfileService from "../profile";
import { modelAIRecommend } from "../../configs/aichat/recommend";
import { userModel, UserTargetScore } from "../../models/user.model";
import { recommendModel } from "../../models/recommend";
import { createRecommend } from "../recommend";
import axios from "axios";
import { genAI } from "../../configs/aichat/instance";
import { aiChatSessionModel } from "../../models/ai_chat_session.model";
import { aiChatMessageModel } from "../../models/ai_chat_message.model";
import { chatModel } from "../../configs/aichat/chat_model";
function promptText(word: string) {
  return `Provide structured details for the word "${word}" following the specified schema.`;
}
namespace AiChatSrv {

  export async function getListSessions({userId}: {userId: string}) {
    const sessions = await aiChatSessionModel.find({userId}).lean();
    return sessions;
  }


  export async function startSession({
    userId,
    title,
  }: {
    userId: string;
    title?: string;
  }) {
    const session = await aiChatSessionModel.create({
      userId,
      title,
    });
    return session.toJSON();
  }

  export async function getHistory({
    userId,
    sessionId,
    limit,
  }: {
    userId: string;
    sessionId: string;
    limit?: number;
  }) {
    const session = await aiChatSessionModel.findById(sessionId);
    if (!session || String(session.userId) !== String(userId)) {
      throw new BadRequestError("Invalid session");
    }
    const take = Math.min(Math.max(limit || 50, 1), 200);
    const items = await aiChatMessageModel
      .find({ sessionId })
      .sort({ createdAt: 1 })
      .limit(take);
    return items.map((m) => m.toJSON());
  }

  export async function deleteHistory({
    userId,
    sessionId,
  }: {
    userId: string;
    sessionId: string;
  }) {
    const session = await aiChatSessionModel.findById(sessionId);
    if (!session || String(session.userId) !== String(userId)) {
      throw new BadRequestError("Invalid session");
    }
    await aiChatMessageModel.deleteMany({ sessionId });
    await aiChatSessionModel.deleteOne({ _id: sessionId });
    return { ok: true };
  }


  export async function sendMessage({
    userId,
    sessionId,
    content,
    socketId,
  }: {
    userId: string;
    sessionId?: string;
    content: string;
    socketId?: string;
  }) {
    if (!content?.trim()) throw new BadRequestError("content is required");
  
    let session;
    let actualSessionId = sessionId;
  
    // üîÑ T·ª± ƒë·ªông t·∫°o session n·∫øu ch∆∞a c√≥
    if (!sessionId) {
      const derivedTitle = content
        .trim()
        .replace(/\s+/g, ' ')
        .slice(0, 60);
      session = await aiChatSessionModel.create({
        userId,
        title: derivedTitle,
      });
      actualSessionId = session.id;
      console.log("T·∫°o session");
      
      // üì° G·ª≠i sessionId ngay l·∫≠p t·ª©c qua Socket.IO n·∫øu c√≥
      if (socketId && (global as any).io) {
        console.log("G·ª≠i sessionId ngay l·∫≠p t·ª©c qua Socket.IO n·∫øu c√≥");
        (global as any).io.to(socketId).emit("session_created", {
          sessionId: actualSessionId,
          isNewSession: true,
        });
      }
    } else {
      // ‚úÖ Ki·ªÉm tra session c√≥ t·ªìn t·∫°i v√† thu·ªôc v·ªÅ user kh√¥ng
      session = await aiChatSessionModel.findById(sessionId);
      if (!session || String(session.userId) !== String(userId)) {
        throw new BadRequestError("Invalid session");
      }
    }
  
    // ‚ö°Ô∏è L·∫•y l·ªãch s·ª≠ tin nh·∫Øn
    const historyDocs = await aiChatMessageModel
      .find({ sessionId: actualSessionId })
      .sort({ createdAt: 1 })
      .limit(30);
  
    // ‚úÖ L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng
    await aiChatMessageModel.create({
      sessionId: actualSessionId,
      role: "user",
      content,
    });
  
    // ‚öôÔ∏è Kh·ªüi t·∫°o chat v·ªõi l·ªãch s·ª≠ g·∫ßn nh·∫•t
    const chat = chatModel.startChat({
      history: historyDocs.map((m) => ({
        role: m.role === "user" ? "user" : "model",
        parts: [{ text: m.content }],
      })),
    });
  
    // ‚ö°Ô∏è G·ª≠i v√† stream ph·∫£n h·ªìi
    const result = await chat.sendMessageStream(content);
    let reply = "";
  
    // üì° B·∫Øt ƒë·∫ßu streaming n·∫øu c√≥ socketId
    if (socketId && (global as any).io) {
      (global as any).io.to(socketId).emit("stream_start", {    
        sessionId: actualSessionId,
        messageId: null, // S·∫Ω ƒë∆∞·ª£c set sau khi l∆∞u
      });
    }
  
    for await (const chunk of result.stream) {
      const part = chunk.text();
      console.log(part)
      reply += part;
  
      // üì° G·ª≠i t·ª´ng chunk qua Socket.IO
      if (socketId && (global as any).io) {
        (global as any).io.to(socketId).emit("chat_stream", {
          sessionId: actualSessionId,
          chunk: part,
          isComplete: false,
        });
      }
    }
  
    // üíæ L∆∞u tin nh·∫Øn model
    const modelMsg = await aiChatMessageModel.create({
      sessionId: actualSessionId,
      role: "model",
      content: reply,
    });
  
    // üîÑ C·∫≠p nh·∫≠t th·ªùi gian tin nh·∫Øn cu·ªëi
    session.lastMessageAt = new Date();
    await session.save();
  
    // üì° G·ª≠i th√¥ng b√°o ho√†n th√†nh streaming
    if (socketId && (global as any).io) {
      (global as any).io.to(socketId).emit("stream_complete", {
        sessionId: actualSessionId,
        messageId: modelMsg.id,
        fullReply: reply,
      });
    }
  
    return {
      reply,
      messageId: modelMsg.id,
      sessionId: actualSessionId,
      isNewSession: !sessionId, // Th√¥ng b√°o cho client bi·∫øt ƒë√¢y l√† session m·ªõi
    };
  }

  export async function getFlashcardInfor(prompt: string) {
    if (!prompt) {
      throw new BadRequestError("prompt is required");
    }
    const promptHandled = promptText(prompt);
    const result = await modelAI.generateContent(promptHandled);
    return result.response.text();
  }
  export async function getQuizz(flashcards: FlashcardAttr[]) {
    const prompt = `Generate quiz questions based on this input: ${JSON.stringify(
      flashcards
    )}`;
    const result = await modelAIQuizz.generateContent(prompt);
    return result.response.text();
  }
  export async function explainQuestion(question: any) {
    const prompt = `T·∫°o l·ªùi gi·∫£i b·∫±ng ti·∫øng Vi·ªát cho c√°c c√¢u h·ªèi c√≥ d·ªØ li·ªáu l√† ƒëo·∫°n vƒÉn b·∫£n. Trong l·ªùi gi·∫£i, n·∫øu c√¢u tr·∫£ l·ªùi c√≥ th·ªÉ ƒë∆∞·ª£c tr√≠ch t·ª´ ƒëo·∫°n vƒÉn, h√£y ch·ªâ r√µ c√¢u n√†o th·ªÉ hi·ªán ƒë√°p √°n ƒë√∫ng v√† ƒëo·∫°n vƒÉn ƒë√≥ n·∫±m ·ªü v·ªã tr√≠ th·ª© m·∫•y (n·∫øu vƒÉn b·∫£n c√≥ nhi·ªÅu ƒëo·∫°n).   : ${JSON.stringify(
      question
    )}`;

    const image = question.image;

    if (Array.isArray(image) && image.length > 0) {
      const imageList = await Promise.all(
        image.map(async (item: string) => {
          const { data } = await axios.get(item, { responseType: "arraybuffer" });
          return {
            inlineData: {
              data: Buffer.from(data).toString("base64"),
              mimeType: "image/jpg",
            },
          };
        })
      );
      
      const result = await explainAIModel.generateContent([prompt, ...imageList]);
      return result.response.text();

    } else {
      const result = await explainAIModel.generateContent(prompt);
      return result.response.text();
    }
  }

  // export async function explainQuestion(question: any) {
  //   const prompt = `T·∫°o l·ªùi gi·∫£i b·∫±ng ti·∫øng Vi·ªát cho c√°c c√¢u h·ªèi c√≥ d·ªØ li·ªáu l√† ƒëo·∫°n vƒÉn b·∫£n. Trong l·ªùi gi·∫£i, n·∫øu c√¢u tr·∫£ l·ªùi c√≥ th·ªÉ ƒë∆∞·ª£c tr√≠ch t·ª´ ƒëo·∫°n vƒÉn, h√£y ch·ªâ r√µ c√¢u n√†o th·ªÉ hi·ªán ƒë√°p √°n ƒë√∫ng v√† ƒëo·∫°n vƒÉn ƒë√≥ n·∫±m ·ªü v·ªã tr√≠ th·ª© m·∫•y (n·∫øu vƒÉn b·∫£n c√≥ nhi·ªÅu ƒëo·∫°n): ${JSON.stringify(
  //     question
  //   )}`;
  
  //   const result = await explainAIModel.generateContent(prompt);
  //   return result.response.text();
  // }

  
  export async function suggestForStudy({ userId }: { userId: string }) {
    const analyst = await ProfileService.getAnalyst(userId);
    const user = await userModel.findById(userId);
    if (!user) {
      throw new BadRequestError("User not found");
    }
    const targetScore = user.targetScore;
    const prompt = await recommendPrompt(analyst, targetScore!);
    const text = await modelAIRecommend.generateContent(prompt);
    const rs = text.response.text();
    const recommend = await createRecommend({
      userId,
      targetScore: targetScore as UserTargetScore,
      content: rs,
    });
    return rs;
  }
  export async function explainQuestionJson(question: Object) {
    const text = await explainQuestion(question);
    return JSON.parse(text);
  }
  export async function getQuizzJson(flashcards: FlashcardAttr[]) {
    const text = await getQuizz(flashcards);
    return JSON.parse(text);
  }
  export async function getFlashcardInforJson(prompt: string) {
    const text = await getFlashcardInfor(prompt);
    return JSON.parse(text);
  }
  export async function getSuggestForStudyJson(userId: string) {
    const text = await suggestForStudy({ userId });
    return JSON.parse(text);
  }
}

export default AiChatSrv;
